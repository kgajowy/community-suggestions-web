{"version":3,"sources":["theme/styled.ts","shared/components/Button.tsx","submit-form/components/SubmitDescription.tsx","submit-form/components/SubmitName.tsx","submit-form/components/SubmitForm.tsx","submit-form/SubmitSuggestion.tsx","theme/default-theme.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["styled","default","ThemeProvider","css","createGlobalStyle","keyframes","Button","button","_templateObject","p","theme","primaryColor","secondaryColor","TextArea","textarea","SubmitDescription_templateObject","concat","SubmitDescription","_templateObject2","SubmitName","input","SubmitName_templateObject","SubmitForm","_ref","onSubmit","_useState","useState","_useState2","Object","slicedToArray","title","setTitle","_useState3","_useState4","description","setDescription","react","onChange","event","currentTarget","value","onClick","SubmitSuggestion","suggestion","console","log","SubmitForm_SubmitForm","this","React","defaultTheme","App","react_default","a","createElement","Fragment","dist","SubmitSuggestion_SubmitSuggestion","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yOAOaA,IAATC,QAIAC,KAHAC,MACAC,oBACAC,YACAH,eAIWF,iNCbR,IAAMM,EAASN,EAAOO,OAAVC,IAGG,SAAAC,GAAC,OAAIA,EAAEC,MAAMC,cACxB,SAAAF,GAAC,OAAIA,EAAEC,MAAME,kOCFxB,IAAMC,EAAWb,EAAOc,SAAVC,IACF,SAAAN,GAAC,mBAAAO,OAAiBP,EAAEC,MAAMC,gBAMzBM,EAAoBjB,EAAOa,EAAPb,CAAHkB,4FCTvB,IAAMC,EAAanB,EAAOoB,MAAVC,IACX,SAAAZ,GAAC,mBAAAO,OAAiBP,EAAEC,MAAMC,aAAzB,QCSAW,EAA4C,SAAAC,GAAgB,IAAdC,EAAcD,EAAdC,SAAcC,EAC3CC,mBAAiB,IAD0BC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GAC9DK,EAD8DH,EAAA,GACvDI,EADuDJ,EAAA,GAAAK,EAI/BN,mBAAiB,IAJcO,EAAAL,OAAAC,EAAA,EAAAD,CAAAI,EAAA,GAI9DE,EAJ8DD,EAAA,GAIjDE,EAJiDF,EAAA,GASrE,OACIG,EAAA,cAAAA,EAAA,cACIA,EAAA,cAACjB,EAAD,CAAYkB,SATE,SAACC,GAAD,OAA8CP,EAASO,EAAMC,cAAcC,QASpDA,MAAOV,IAC5CM,EAAA,cAACnB,EAAD,CAAmBoB,SAPN,SAACC,GAAD,OAAiDH,EAAeG,EAAMC,cAAcC,QAOtDA,MAAON,IAClDE,EAAA,cAAC9B,EAAD,CAAQmC,QANA,kBAAMjB,EAAS,CAACM,QAAOI,kBAM/B,uBCrBSQ,6MACVlB,SAAW,SAACmB,GAEfC,QAAQC,IAAR,yBAAsCF,4EAItC,OAAOP,EAAA,cAACU,EAAD,CAAYtB,SAAUuB,KAAKvB,kBAPIwB,aCFjCC,EAAgC,CACzCtC,aAAc,QACdC,eAAgB,SCkBLsC,mLAbP,OAAQC,EAAAC,EAAAC,cAAAF,EAAAC,EAAAE,SAAA,KACAH,EAAAC,EAAAC,cAACE,EAAA,UAAD,MACAJ,EAAAC,EAAAC,cAACnD,EAAD,CAAeQ,MAAOuC,GAClBE,EAAAC,EAAAC,cAAAF,EAAAC,EAAAE,SAAA,KACIH,EAAAC,EAAAC,cAAA,uCACAF,EAAAC,EAAAC,cAACG,EAAD,gBAPNC,aCKEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAOb,EAAAC,EAAAC,cAACY,EAAD,MAASC,SAASC,eAAe,SDoI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.d7e0c399.chunk.js","sourcesContent":["// styled-components.ts\nimport * as styledComponents from 'styled-components'\nimport {ThemedStyledComponentsModule} from 'styled-components'\n\nimport ThemeInterface from './theme'\n\nconst {\n    default: styled,\n    css,\n    createGlobalStyle,\n    keyframes,\n    ThemeProvider\n} = styledComponents as ThemedStyledComponentsModule<ThemeInterface>\n\nexport {css, createGlobalStyle, keyframes, ThemeProvider}\nexport default styled","import styled from '../../theme/styled'\n\nexport const Button = styled.button`\n  background: transparent;\n  border-radius: 3px;\n  border: 2px solid ${p => p.theme.primaryColor};\n  color: ${p => p.theme.secondaryColor};\n  margin: 0 1em;\n  padding: 0.25em 1em;\n`","import styled from '../../theme/styled'\n// TODO test - border and font color should adjust as theme definition\n// TODO test - font & font-size should be the same as on theme\n\nconst TextArea = styled.textarea`\n  border: ${p => `1px solid ${p.theme.primaryColor}`};\n  border-radius: 5px;\n  margin: 0;\n  width: 100%;\n`\n\nexport const SubmitDescription = styled(TextArea)``","import styled from '../../theme/styled'\n\nexport const SubmitName = styled.input`\n  border: ${p => `1px solid ${p.theme.primaryColor}\n`};\n`","import * as React from 'react'\nimport {FunctionComponent, useState} from 'react'\nimport {Button} from '../../shared/components/Button'\nimport Suggestion from '../suggestion'\nimport {SubmitDescription} from './SubmitDescription'\nimport {SubmitName} from './SubmitName'\n\nexport interface SubmitForm {\n    onSubmit: (suggestion: Suggestion) => void\n}\n\n// export function SubmitForm({onSubmit}: SubmitForm) {\nexport const SubmitForm: FunctionComponent<SubmitForm> = ({onSubmit}) => {\n    const [title, setTitle] = useState<string>('')\n    const onTitleChange = (event: React.FormEvent<HTMLInputElement>) => setTitle(event.currentTarget.value)\n\n    const [description, setDescription] = useState<string>('')\n    const onDescChange = (event: React.FormEvent<HTMLTextAreaElement>) => setDescription(event.currentTarget.value)\n\n    const onClick = () => onSubmit({title, description})\n\n    return (\n        <>\n            <SubmitName onChange={onTitleChange} value={title}/>\n            <SubmitDescription onChange={onDescChange} value={description}/>\n            <Button onClick={onClick}>Submit suggestion</Button>\n        </>\n    )\n}","import * as React from 'react'\nimport {SubmitForm} from './components/SubmitForm'\nimport Suggestion from './suggestion'\n\nexport default class SubmitSuggestion extends React.Component<{}, {}> {\n    public onSubmit = (suggestion: Suggestion) => {\n        // TODO dispatch\n        console.log(`submitting suggestion:`, suggestion)\n    }\n\n    public render() {\n        return <SubmitForm onSubmit={this.onSubmit}/>\n    }\n}","import ThemeInterface from './theme'\n\nexport const defaultTheme : ThemeInterface = {\n    primaryColor: 'black',\n    secondaryColor: 'black'\n}","import React, {Component} from 'react'\nimport {Normalize} from 'styled-normalize'\nimport SubmitSuggestion from './submit-form/SubmitSuggestion'\nimport {defaultTheme} from './theme/default-theme'\nimport {ThemeProvider} from './theme/styled'\n\n\nclass App extends Component {\n    render() {\n        return (<>\n                <Normalize/>\n                <ThemeProvider theme={defaultTheme}>\n                    <>\n                        <h1>Hello WarsawJS Community!</h1>\n                        <SubmitSuggestion/>\n                    </>\n                </ThemeProvider>\n            </>\n        )\n    }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}